---------------- REGISTO: ---------------

Pedido:

type | register ; clientNo | *clientNo* ; username | *username* ; password | *password*

Respostas:

Registo aceite:
type | registerResult ; clientNo | *clientNo* ; status | valid ; username | *o username* ; isAdmin | *boolean*

Registo com username já existente:
type | registerResult ; clientNo | *clientNo* ; status | invalid


------------- LOGIN: -------------------

Pedido:

type | login ; clientNo | *clientNo* ; username | *username* ; password | *password*

Respostas:

Login valido:
type | loginResult ; clientNo | *clientNo* ; status | valid ; username | *o username* ; isAdmin | *boolean* ; notification | *boolean*

Login Invalido:
type | loginResult ; clientNo | *clientNo* ; status | invalid


---------------- INDEX: -----------------

Pedido:

type | index ; clientNo | *clientNo* ; url | *url*

Resposta:

type | indexResult ; clientNo | *clientNo* ; status | started


------------- SEARCH: -------------------

Pedido:

type | search ; clientNo | *clientNo* ; word | *words*

Resposta:

type | searchResult ; clientNo | *clientNo* ; urlCount | *numero de urls* ; url_0 | *1º url* ; url_1 | *2º url* ; etc.


----------- SEARCH HISTORY: ---------------

Pedido:

type | searchHistory ; clientNo | *clientNo* ; username | *username*

Reposta:

type | searchHistoryResult ; clientNo | *clientNo* ; searchCount | *numero de urls* ; search_0 | *1º url* ; search_1 | *2º url* ; etc.


----------- LINKS POINTING: ---------------

Pedido:

type | linksPointing ; clientNo | *clientNo* ; url | *url*

Reposta:

type | linksPointingResult ; clientNo | *clientNo* ; linkCount | *numero de links* ; link_0 | *1º url* ; link_1 | *2º url* ; etc.


-------------- PROMOTION: -----------------

Pedido:

type | promote ; clientNo | *clientNo* ; username | *username*

Respostas:

type | promoteResult ; clientNo | *clientNo* ; status | valid           // Resposta em que o novo admin não está online

type | promoteResult ; clientNo | *clientNo* ; status | valid  ; newAdminNo | *newAdminNo*          //Resposta em que o novo admin está online e o RMI server tem de mandar notificação

type | promoteResult ; clientNo | *clientNo* ; status | invalid ; message | User is already admin	//Resposta em que user já é admin

type | promoteResult ; clientNo | *clientNo* ; status | invalid ; message | That user doesn't exist	//Resposta em que o user não existe


--------- QUANDO SE LIGA UM MULTICAST SERVER: -------------------

O multicast server avisa o rmi server que se ligou:

type | multicastServerStarter ; ipAddress | *endereço ip do pc onde está a correr o multicast server* ; porto | *porto definido*

O RMI responde com o numero atribuido a este multicast server:

type | multicastServerStarterResult ; serverNo | *o numero do multicast server* ; serverCount | *numero de multicast servers existentes* ; serverNo_0 | *nº do 1º* ; ip_0 | *ip do 1º* ; porto_0 | *porto do 1º*


--------------------- QUANDO UM MULTICAST SERVER VAI ABAIXO:----------------------

type | multicastServerDown ; serverNo | *serverNo*









